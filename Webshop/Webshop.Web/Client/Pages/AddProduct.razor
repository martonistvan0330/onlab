@page "/admin/newproduct"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net.Http.Headers
@using Webshop.Web.Client.Clients
@using Webshop.Web.Shared.Models
@using Webshop.Web.Client.Components

@attribute [Authorize]

@inject PrivateClient privateClient
@inject PublicClient publicClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavManager

@if (categories != null)
{
<AdminView ErrorText="You are not an admin!">
	<div class="page">
		<h3>Add new product</h3>

		<EditForm EditContext=editContext OnSubmit="@HandleSubmit" class="bg-dark text-white rounded w-auto p-3">
			<DataAnnotationsValidator/>
			<label class="form-label">
				Name
				<InputText @bind-Value=newProduct.Name DisplayName="Product Name" class="form-control"/>
				<ValidationMessage For="@(() => newProduct.Name)" />
			</label>
			<label class="form-label">
				Price
				<InputNumber @bind-Value=newProduct.Price DisplayName="Price" class="form-control" min=1000 max=200000 step=1000/>
				<ValidationMessage For="@(() => newProduct.Price)" />
			</label>
			<label class="form-label">
				Main Image
				<InputFile OnChange="@OnInputFileChange" DisplayName="Image" class="form-control" accept="image/png"></InputFile>
				<p>@ImageError</p>
			</label>
			<label class="form-label category">
				Category
				<InputSelect @bind-Value="@newProduct.CategoryId" class="form-select">
					@foreach (var category in categories)
					{
						<option value="@category.Id">@category.Name</option>
					}
				</InputSelect>
			</label>
			<label class="form-label">
				XS
				<InputNumber @bind-Value=newProduct.XS class="form-control" min=0 max=100/>
				<ValidationMessage For="@(() => newProduct.XS)" />
			</label>
			<label class="form-label">
				S
				<InputNumber @bind-Value=newProduct.S class="form-control" min=0 max=100/>
				<ValidationMessage For="@(() => newProduct.S)" />
			</label>
			<label class="form-label">
				M
				<InputNumber @bind-Value=newProduct.M class="form-control" min=0 max=100/>
				<ValidationMessage For="@(() => newProduct.M)" />
			</label>
			<label class="form-label">
				L
				<InputNumber @bind-Value=newProduct.L class="form-control" min=0 max=100/>
				<ValidationMessage For="@(() => newProduct.L)" />
			</label>
			<label class="form-label">
				XL
				<InputNumber @bind-Value=newProduct.XL class="form-control" min=0 max=100/>
				<ValidationMessage For="@(() => newProduct.XL)" />
			</label>
			<label class="form-label">
				XXL
				<InputNumber @bind-Value=newProduct.XXL class="form-control" min=0 max=100/>
				<ValidationMessage For="@(() => newProduct.XXL)" />
			</label>
			<button class="btn btn-success btn-lg" type="submit">Add Product</button>
		</EditForm>
	</div>
</AdminView>
}
else
{
	<p>Loading...</p>
}

@code {
	private string userId;

	private Category[]? categories;

	private NewProduct newProduct = new NewProduct();

	private IBrowserFile file;

	private EditContext? editContext;

	private const long maxFileSize = 1024 * 1024 * 100;

	private string ImageError;

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		userId = user.FindFirst(c => c.Type == "sub")?.Value;
		editContext = new(newProduct);
		categories = await publicClient.GetCategories();
	}

	private async Task OnInputFileChange(InputFileChangeEventArgs e)
	{
		if (e.File.ContentType.Contains("png"))
		{
			file = e.File;
			ImageError = "";
		}
		else
		{
			ImageError = "not a png";
		}
	}

	private async Task HandleSubmit()
	{
		if (editContext != null && 
			editContext.Validate() &&
			string.IsNullOrEmpty(ImageError))
		{
			var productId = await privateClient.AddNewProduct(newProduct, userId);
			if (productId > 0)
			{
				using var content = new MultipartFormDataContent();

				try
				{
					var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
					fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
					content.Add(
						content: fileContent,
						name: "\"files\"",
						fileName: file.Name);
					if (await privateClient.AddProductImage(content, productId, userId, true))
					{
						NavManager.NavigateTo($"/admin/products/{productId}");
					}
					else
					{
						NavManager.NavigateTo($"/error");
					}
				}
				catch
				{
					ImageError = "something went wrong";
				}
			}
		}
	}
}
