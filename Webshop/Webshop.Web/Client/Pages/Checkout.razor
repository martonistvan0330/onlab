@page "/checkout"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Webshop.Web.Client.Clients
@using Webshop.Web.Client.Models
@using Webshop.Web.Shared.Models

@attribute [Authorize]

@inject PrivateClient client
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavManager

<h3>Place Your Order</h3>

<EditForm EditContext="@editContext" OnSubmit="@HandleSubmit" class="bg-dark text-white rounded w-auto p-3">
    <DataAnnotationsValidator />
	<div class="container">
		<h4>Shipping </h4>
		<InputRadioGroup @bind-Value=shipping class="mb-5">
			<div class="btn-group" role="group" aria-label="Basic radio toggle button group">
				<InputRadio Value=Shipping.Delivery class="btn-check" id="delivery" autocomplete="off" checked></InputRadio>
				<label class="btn btn-outline-success text-white" for="delivery">Delivery</label>

				<InputRadio Value=Shipping.Pickup class="btn-check" id="store-pickup" autocomplete="off"></InputRadio>
				<label class="btn btn-outline-success text-white" for="store-pickup">Store pickup</label>

				<InputRadio Value=Shipping.FoxPost class="btn-check" id="foxpost" autocomplete="off"></InputRadio>
				<label class="btn btn-outline-success text-white" for="foxpost">FoxPost</label>
			</div>
		</InputRadioGroup>
		@switch (shipping)
		{
			case Shipping.Delivery:
			{
				<AddressInput @ref=shippingAddressInput AddressInfoModel=model.ShippingAddressInfo></AddressInput>
				break;
			}
			case Shipping.Pickup:
			{
				<h5>Store Pickup</h5>
				break;
			}
			case Shipping.FoxPost:
			{
				<h5>FoxPost</h5>
				break;
			}
		}
	</div>

	<div class="container">
		<h4>Payment Method</h4>
		<InputRadioGroup @bind-Value=payment class="mb-5">
			<div class="btn-group" role="group" aria-label="Basic radio toggle button group">
				<InputRadio Value=Payment.Cash class="btn-check" id="cash" autocomplete="off" checked></InputRadio>
				<label class="btn btn-outline-success text-white" for="cash">Cash</label>

				<InputRadio Value=Payment.Paypal class="btn-check" id="paypal" autocomplete="off"></InputRadio>
				<label class="btn btn-outline-success text-white" for="paypal">Paypal</label>

				<InputRadio Value=Payment.OnDelivery class="btn-check" id="ondelivered" autocomplete="off"></InputRadio>
				<label class="btn btn-outline-success text-white" for="ondelivered">Pay when delivered</label>
			</div>
		</InputRadioGroup>
		@switch (payment)
		{
			case Payment.Cash:
			{
				<h5>Cash</h5>
				break;
			}
			case Payment.Paypal:
			{
				<h5>Paypal</h5>
				break;
			}
			case Payment.OnDelivery:
			{
				<h5>Pay when delivered</h5>
				break;
			}
		}
	</div>

	<div class="container">
		<h4>Billing Address</h4>
		<div class="form-check">
			<input class="form-check-input" type="checkbox" @bind="sameAsShipping" id="flexCheckDefault">
			<label class="form-check-label" for="flexCheckDefault">
				Same as Shipping Address
			</label>
		</div>
		@if (!sameAsShipping)
		{
			<AddressInput AddressInfoModel=model.BillingAddressInfo></AddressInput>
		}
	</div>

	<div class="container">
		<button class="btn btn-primary btn-lg" type="submit">Place Order</button>
	</div>
</EditForm>


@code {
	private string userId;

	CheckoutModel model = new();

	private EditContext? editContext;

	AddressInput shippingAddressInput;

	AddressInput billingAddressInput;

	private int customerId;

	private Shipping shipping = Shipping.Delivery;

	private Payment payment = Payment.Cash;

	private bool sameAsShipping = true;

	private EditForm form;

	protected override async Task OnInitializedAsync()
	{
		editContext = new(model);
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		userId = user.FindFirst(c => c.Type == "sub")?.Value;
	}

	private async Task HandleSubmit()
	{
		if (editContext != null && 
			editContext.Validate() && 
			shippingAddressInput.Validate() && 
			(sameAsShipping || billingAddressInput.Validate()))
		{
			await PlaceOrder();
			await Task.CompletedTask;
		}
	}

	private async Task PlaceOrder()
	{
		customerId = await SaveCustomer();
		if (customerId > 0)
		{
			var (success, orderId) = await client.CreateOrder(userId, customerId);
			if (success)
			{
				NavManager.NavigateTo($"/order/{orderId}");
			}
			else
			{
				NavManager.NavigateTo("/error");
			}
		}
	}

	private async Task<int> SaveCustomer()
	{
		if (sameAsShipping)
		{
			model.BillingAddressInfo = model.ShippingAddressInfo;
		}
		if (model.BillingAddressInfo != null && model.ShippingAddressInfo != null)
		{
			var newCustomer = new NewCustomer()
			{
				Name = model.ShippingAddressInfo.FirstName + " " + model.ShippingAddressInfo.LastName,
				ShippingInfo = new ShippingInfo()
				{
					ShippingMethodId = 1,
					ShippingMethodName = "Shipping",
					ShippingAddressInfo = model.ShippingAddressInfo,
				},
				PaymentInfo = new PaymentInfo()
				{
					PaymentMethodId = 1,
					PaymentMethodName = "Cash",
					BillingAddressInfo = model.BillingAddressInfo,
				},
			};
			return await client.AddCustomer(newCustomer, userId);
		}
		else
		{
			return -1;
		}
	}
}
