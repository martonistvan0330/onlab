@page "/cart"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Webshop.Web.Client.Clients
@using Webshop.Web.Shared.Models

@attribute [Authorize]

@inject PrivateClient client
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Your Cart</h3>

@if (cartItems == null)
{
	<p><em>Loading...</em></p>
}
else if (cartItems.Count() <= 0)
{
	<p><em>Cart is empty</em></p>
} 
else
{
	<table class="table table-dark table-striped">
		<thead>
			<tr>
				<th scope="col" class="name">Name</th>
				<th scope="col" class="size">Size</th>
				<th scope="col" class="amount">Amount</th>
				<th scope="col" class="price">Price</th>
				<th scope="col" class="delete"></th>
			</tr>
		</thead>
		<tbody>
			@foreach (var cartItem in cartItems)
			{
				<tr>
					<td>@cartItem.ProductName</td>
					<td>
						<SizeChooser CartItem=@cartItem></SizeChooser>
					</td>
					<td>
						<button type="button" class="btn btn-danger btn-sm" @onclick="(args) => AmountChanged(args, cartItem, -1)">-</button>
						@cartItem.Amount
						<button type="button" class="btn btn-success btn-sm" @onclick="(args) => AmountChanged(args, cartItem, 1)">+</button>
					</td>
					<td>@cartItem.Price</td>
					<td>
						<button type="button" class="btn btn-danger btn-sm" @onclick="(args) => DeleteCartItem(args, cartItem)">
							<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
								<path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
								<path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
							</svg>
						</button>
					</td>
				</tr>
			}
		</tbody>
	</table>

	<h4>Total: @total</h4>

	<NavLink class="btn btn-success btn-lg" href="checkout">Proceed To Checkout</NavLink>
}

@code {
	private CartItem[]? cartItems;

	private string userId;

	private double total;

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		userId = user.FindFirst(c => c.Type == "sub")?.Value;
		try
		{
			cartItems = await client.GetCartItems(userId);
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
		total = await CalculateTotal();
	}

	private async Task SizeChanged(ChangeEventArgs e, CartItem cartItem)
	{
		var previousValue = cartItem.SizeId;
		cartItem.SizeId = int.Parse(e.Value.ToString());
		try
		{
			var success = await client.UpdateCartItem(cartItem, userId);
			if (!success)
			{
				cartItem.SizeId = previousValue;
			}
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}

	private async Task AmountChanged(MouseEventArgs e, CartItem cartItem, int amountChange)
	{
		var unitPrice = cartItem.Price / cartItem.Amount;
		var previousValue = cartItem.Amount;
		cartItem.Amount += amountChange;
		if (cartItem.Amount <= 0)
		{
			await DeleteCartItem(null, cartItem);
		}
		else
		{
			try
			{
				var success = await client.UpdateCartItem(cartItem, userId);
				if (!success)
				{
					cartItem.Amount = previousValue;
				}
				cartItem.Price = cartItem.Amount * unitPrice;
				total = await CalculateTotal();
			}
			catch (AccessTokenNotAvailableException exception)
			{
				exception.Redirect();
			}
		}
	}

	private async Task DeleteCartItem(MouseEventArgs e, CartItem cartItem)
	{
		try
		{
			var success = await client.DeleteCartItem(cartItem.Id, userId);
			if (success)
			{
				cartItems = cartItems.Where(ci => ci.Id != cartItem.Id).ToArray();
				total = await CalculateTotal();
			}
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}

	private async Task<double> CalculateTotal()
	{
		return await Task.Run(() => { double newTotal = 0;
			foreach (var cartItem in cartItems)
			{
				newTotal += cartItem.Price;
			}
			return newTotal;
		});
	}
}